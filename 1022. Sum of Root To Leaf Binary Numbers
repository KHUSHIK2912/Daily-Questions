/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> v;
    vector<int> vg;
    bool getpath(TreeNode* root, TreeNode* node)
    {
        if(root==NULL)
            return false;
        
        vg.push_back(root->val);
        if(root==node)
            return true;
        if(getpath(root->left,node) || getpath(root->right,node))
            return true;
        
        vg.pop_back();
        return false;
    }
    void getleaves(TreeNode* root)
    {
        if(root==NULL)
            return ;
        
        if(root->left==NULL && root->right==NULL)
            v.push_back(root);
        
        getleaves(root->left);
        getleaves(root->right);
    }
    int sumRootToLeaf(TreeNode* root) 
    {
        getleaves(root);
        
        int i,j,num=0,sum=0;
        for(auto it: v)
        {
            getpath(root,it);
            j=0;
            num=0;
            for(i=vg.size()-1;i>=0;i--)
            {
                num+=(vg[i]*pow(2,j));
                j++;
            }
            sum+=num;
            vg.clear();
        }
        return sum;
    }
};
