I)   RECURSIVE APPROACH

class Solution {
public:
    int solve(vector<vector<int>>& tri, int n, int i, int j)
    {
        if(i==n)
            return 0;
        return t[i][j]=tri[i][j]+min(solve(tri,n,i+1,j), solve(tri,n,i+1,j+1));
    }
    int minimumTotal(vector<vector<int>>& tri) 
    {
        int n=tri.size();
        return solve(tri, n, 0, 0);
    }
};






II)   MEMEOIZED APPROACH

class Solution {
public:
    vector<vector<int>> t;
    int solve(vector<vector<int>>& tri, int n, int i, int j)
    {
        if(i==n)
            return 0;
        if(t[i][j]!=-1)
            return t[i][j];
        return t[i][j]=tri[i][j]+min(solve(tri,n,i+1,j), solve(tri,n,i+1,j+1));
    }
    int minimumTotal(vector<vector<int>>& tri) 
    {
        int n=tri.size(), m=tri[n-1].size(),i,j,ans;
        t=vector<vector<int>>(n+1,vector<int> (m+1,-1));
        ans=solve(tri, n, 0, 0);
        // for(i=0;i<n+1;i++)
        // {
        //     for(j=0;j<m+1;j++)
        //         cout<<t[i][j]<<"   ";
        //     cout<<endl;
        // }
        return ans;
    }
};









III)   DYNAMIC PROGRAMMING APPROACH

class Solution {
public:
    int solve(vector<vector<int>>& tri, int n)
    {
        int i,j,m=tri[n-1].size();
        int t[n][m];
        
        for(j=0;j<m;j++)
            t[n-1][j]=tri[n-1][j];
        for(i=n-2;i>=0;i--)
        {
            for(j=0;j<tri[i].size();j++)
            {
                t[i][j]=tri[i][j]+min(t[i+1][j], t[i+1][j+1]);
            }
        }
        
        // for(i=0;i<n;i++)
        // {
        //     for(j=0;j<m;j++)
        //         cout<<t[i][j]<<"   ";
        //     cout<<endl;
        // }
        return t[0][0];
    }
    int minimumTotal(vector<vector<int>>& tri) 
    {
        int n=tri.size();
        return solve(tri, n);
    }
};


