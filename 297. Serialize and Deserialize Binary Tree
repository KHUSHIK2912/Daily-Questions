/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) 
    {
        if(root==NULL)
            return "";
        
        queue<TreeNode*> q;
        q.push(root);
        string s="";
        
        while(!q.empty())
        {
            TreeNode* node=q.front();
            q.pop();
                
            if(node)
            {
                s+=to_string(node->val)+",";
                q.push(node->left);
                q.push(node->right);
            }
            else
                s+="NULL,";
        }
        return s;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) 
    {
        if(data.size()==0)
            return NULL;
        
        int i,val;
        string s="";
        vector<int> v;
        
        for(i=0;i<data.size();i++)
        {
            if(data[i]!=',')
                s+=data[i];
            else
            {
                if(s=="NULL")
                    v.push_back(INT_MAX);
                else
                {
                    val=stoi(s);
                    v.push_back(val);
                }     
                s="";
            }
        }
        
        i=0;
        queue<TreeNode*> q;
        TreeNode* root=new TreeNode(v[i]);
        q.push(root);
        
        while(!q.empty())
        {
            TreeNode* node=q.front();
            q.pop();
            
            i++;
            if(v[i]!=INT_MAX)
            {
                node->left=new TreeNode(v[i]);
                q.push(node->left);
            }
            else
                node->left=NULL;
            i++;
            if(v[i]!=INT_MAX)
            {
                node->right=new TreeNode(v[i]);
                q.push(node->right);
            }
            else
                node->right=NULL;
        }
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
