/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) 
    {
        if(root==NULL || root->val==x || root->val==y)
            return false;
        
        TreeNode* node;
        TreeNode* xn;
        TreeNode* yn;
        
        queue<TreeNode*> q;
        q.push(root);
        int n=0,i,xt=0,yt=0,fl=0,flg=0,flag=0,k=1;
        
        while(!q.empty())
        {
            n=q.size();
            for(i=0;i<n;i++)
            {
                node=q.front();
                q.pop();
                
                if(node->left!=NULL && node->left->val==x)
                {
                    fl=1;
                    xt=k+1;
                    xn=node;
                }
                else if(node->right!=NULL && node->right->val==x)
                {
                    fl=1;
                    xt=k+1;
                    xn=node;
                }
                if(node->left!=NULL && node->left->val==y)
                {
                    flg=1;
                    yt=k+1;
                    yn=node;
                }
                else if(node->right!=NULL && node->right->val==y)
                {
                    flg=1;
                    yt=k+1;
                    yn=node;
                }
                if(fl==1 && flg==1)
                {
                    flag=1;
                    break;
                }
                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right);
            }
            if(flag==1)
                break;
            k++;
        }
        
        return (xt==yt && xn!=yn);        
    }
};
