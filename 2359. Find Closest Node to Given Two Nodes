class Solution {
public:
    vector<vector<pair<int,int>>> adj;    
    vector<int> getdist(int n, int src)
    {
        vector<int> dist(n, INT_MAX);
        dist[src]=0;
        
        set<pair<int,int>> s;
        s.insert({0,src});
        
        while(!s.empty())
        {
            auto x=*(s.begin());
            s.erase(x);
            
            for(auto it: adj[x.second])
            {
                if(dist[it.first]> (dist[x.second]+it.second))
                {
                    s.erase({dist[it.first], it.first});
                    dist[it.first]=dist[x.second]+it.second;
                    s.insert({dist[it.first], it.first});
                }
            }
        }
        
        return dist;
    }
    int closestMeetingNode(vector<int>& edges, int node1, int node2) 
    {
        int i,n=edges.size(),mx,mn=INT_MAX,idx=-1;
        
        adj=vector<vector<pair<int,int>>> (n);
        vector<int> dist1,dist2;
        
        for(i=0;i<edges.size();i++)
        {
            if(edges[i]>=0)
                adj[i].push_back({edges[i],1});
        }
        
        dist1=getdist(n, node1);
        dist2=getdist(n, node2);        
        
        for(i=0;i<n;i++)
        {
            if(dist1[i]==INT_MAX)
                dist1[i]=-1;
            if(dist2[i]==INT_MAX)
                dist2[i]=-1;
            if(dist1[i]!=-1 && dist2[i]!=-1)
            {
                mx=max(dist1[i], dist2[i]);
                if(mx<mn)
                {
                    mn=mx;
                    idx=i;
                }
            }
        }
        
        return idx;
    }
};
