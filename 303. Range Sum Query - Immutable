APPROACH - I   (BRUTE FORCE)

class NumArray {
public:
    vector<int> v;
    NumArray(vector<int>& nums) 
    {
        v=nums;
    }
    
    int sumRange(int left, int right) 
    {
        int i,sum=0;
        for(i=left;i<=right;i++)
            sum=sum+v[i];
        return sum;
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * int param_1 = obj->sumRange(left,right);
 */
 
 TIME COMPLEXITY - O(N^2)
 
 
 
 
 APPROACH - II   (PREFIX SUM)
 
 class NumArray {
public:
    vector<int> v;
    NumArray(vector<int>& nums) 
    {
        int n=nums.size();
        v=vector<int>(n);
        int i;
        v[0]=nums[0];
        for(i=1;i<nums.size();i++)
            v[i]=v[i-1]+nums[i];
        
        // for(i=0;i<v.size();i++)
        //     cout<<v[i]<<"  ";
        // cout<<endl;
    }
    
    int sumRange(int left, int right) 
    {
       if(left==0)
            return v[right];
        return v[right]-v[left-1];
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * int param_1 = obj->sumRange(left,right);
 */
 
 TIME COMPLEXITY - O(N)
 
 
