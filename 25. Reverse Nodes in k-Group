/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reversek(ListNode* head, int k, int id, int c)
    {
        if(id>=c)
            return head;
        
        ListNode* t=head;
        ListNode* curr=head;
        ListNode* prev=NULL;
        ListNode* nextptr;
        
        int count=0;
        
        while(curr!=NULL && count<k)
        {
            nextptr=curr->next;
            curr->next=prev;
            
            prev=curr;
            curr=nextptr;
            
            count++;
        }
        
        if(nextptr!=NULL)
            head->next=reversek(nextptr, k, id+1, c);
        
        return prev;
    }
    
    ListNode* reverseKGroup(ListNode* head, int k) 
    {
        ListNode* t=head;        
        int c=0;
        
        while(t!=NULL)
        {
            t=t->next;
            c++;
        }
        c=c/k;
        
        return reversek(head, k, 0, c);        
    }
};
