I)  RECURSIVE APPROACH

class Solution {
public:
    int solve(int m, int n)
    {
        if(m-1==0 && n-1==0)
            return 1;
        if(m-1<0 || n-1<0)
            return 0;
        return solve(m-1,n)+solve(m,n-1);
    }
    int uniquePaths(int m, int n) 
    {
        return solve(m,n);
    }
};






II)  MEMOIZED APPROACH

class Solution {
public:
    vector<vector<int>> t;
    int solve(int m, int n)
    {
        if(m-1==0 && n-1==0)
            return 1;
        if(m-1<0 || n-1<0)
            return 0;
        if(t[m][n]!=-1)
            return t[m][n];
        return t[m][n]=solve(m-1,n)+solve(m,n-1);
    }
    int uniquePaths(int m, int n) 
    {
        int i,j;
        t=vector<vector<int>>(m+1, vector<int>(n+1,-1));
        return solve(m,n);
    }
};






III)  DYNAMIC PROGRAMMING APPROACH

class Solution {
public:
    int solve(int m, int n)
    {
        int t[m+1][n+1];
        int i,j;
        
        for(i=0;i<m+1;i++)
            t[i][0]=1;
        for(j=0;j<n+1;j++)
            t[0][j]=1;
        
        for(i=1;i<m;i++)
        {
            for(j=1;j<n;j++)
                t[i][j]=t[i-1][j]+t[i][j-1];
        }
        
        // for(i=0;i<m;i++)
        // {
        //     for(j=0;j<n;j++)
        //         cout<<t[i][j]<<"   ";
        //     cout<<endl;
        // }
        
        return t[m-1][n-1];
    }
    int uniquePaths(int m, int n) 
    {
        return solve(m,n);
    }
};
