class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) 
    {
        priority_queue<pair<int,char>> pq;
        unordered_map<char,int> mp;
        queue<pair<int,char>> q;
        
        int i,c=0,t;
        char ch;
        for(i=0;i<tasks.size();i++)
            mp[tasks[i]]++;
        
        for(auto it: mp)
        {
            pq.push({it.second,it.first});
            it.second=0;
        }
        
        while(!pq.empty() || !q.empty())
        {
            if(!pq.empty())
            {
                t=pq.top().first;
                ch=pq.top().second;
                pq.pop();
                
                t--;
                if(t>0)
                {
                    mp[ch]=c+n;
                    q.push({t,ch});
                }           
            }
            
            if(!q.empty() && mp[q.front().second]==c)
            {
                pq.push({q.front()});
                q.pop();
            }
            c++;                
        }
        
        return c;
    }
};
