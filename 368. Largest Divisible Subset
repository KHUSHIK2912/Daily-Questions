class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) 
    {
        sort(nums.begin(), nums.end());
        
        int i,j,n=nums.size(),mx=0,idx=-1;
        int t[n];
        
        for(i=0;i<n;i++)
            t[i]=1;
        
        for(i=0;i<n;i++)
        {
            for(j=0;j<i;j++)
            {
                if(nums[i]%nums[j]==0 || nums[j]%nums[i]==0)
                    t[i]=max(t[i], 1+t[j]);
            }
        }
        
        vector<int> v;
        for(i=0;i<n;i++)
        {
            if(mx<t[i])
            {
                idx=i;
                mx=t[i];
            }
        }
        
        j=nums[idx];
        for(i=idx;i>=0;i--)
        {
            if(t[i]==mx && (j%nums[i]==0 || nums[i]%j==0))
            {
                v.push_back(nums[i]);
                j=nums[i];
                mx--;
            }
            if(mx==0)
                break;
        }
        return v;
    }
};
