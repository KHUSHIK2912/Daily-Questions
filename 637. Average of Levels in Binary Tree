I)  FIRST APPROACH 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) 
    {
        vector<double> v;
        if(root==NULL)
            return v;
        
        queue<TreeNode*> q;
        q.push(root);
        q.push(NULL);
        double sum=0,avg;
        int n=0;
        
        
        while(!q.empty())
        {
            TreeNode* node=q.front();
            q.pop();
            
            if(node!=NULL)
            {
                sum=sum+node->val;
                n++;
                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right);
            }
            else if(!q.empty())
            {
                avg=sum/(n);
                // cout<<n<<endl;
                sum=0;
                n=0;
                v.push_back(avg);
                q.push(NULL);
            }
        }
        
        avg=sum/(n);
        v.push_back(avg);
        return v;
    }
};










II)  SECOND APPROACH 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) 
    {
        vector<double> v;
        if(root==NULL)
            return v;
        
        queue<TreeNode*> q;
        q.push(root);
        double sum=0,avg;
        int n=0,i;
        
        
        while(!q.empty())
        {
            n=q.size();
            for(i=0;i<n;i++)
            {
                TreeNode* node=q.front();
                q.pop();
                sum=sum+node->val;
                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right);
            }
            avg=sum/n;
            v.push_back(avg);
            sum=0;
        }
        return v;
    }
};
