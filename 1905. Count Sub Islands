class Solution {
public:
    void dfs(vector<vector<int>>& grid2, int i, int j, int n, int m)
    {
        if(i>=n || j>=m || i<0 || j<0 || grid2[i][j]==0)
            return ;
        
        grid2[i][j]=0;
        
        if(i+1<n && grid2[i+1][j]==1)
            dfs(grid2,i+1,j,n,m);
        if(i-1>=0 && grid2[i-1][j]==1)
            dfs(grid2,i-1,j,n,m);
        if(j+1<m && grid2[i][j+1]==1)
            dfs(grid2,i,j+1,n,m);
        if(j-1>=0 && grid2[i][j-1]==1)
            dfs(grid2,i,j-1,n,m);
    }
    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) 
    {
        int i,j,n=grid1.size(),m=grid1[0].size(),c=0;
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(grid2[i][j]==1 && grid1[i][j]==0)
                    dfs(grid2,i,j,n,m);
            }
        }
        
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(grid2[i][j]==1)
                {
                    c++;
                    dfs(grid2,i,j,n,m);
                }
            }
        }
        return c;
    }
};
