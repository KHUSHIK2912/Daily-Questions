/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class FindElements {
public:
    vector<int> v;
    FindElements(TreeNode* root) 
    {
        if(root==NULL)
            return ;
        
        root->val=0;
        v.push_back(0);
        solve(root);
    }
    
    void solve(TreeNode* root)
    {
        if(root==NULL)
            return ;
        
        if(root->left)
        {
            root->left->val=(2*root->val)+1;
            v.push_back(root->left->val);
        }
        if(root->right)
        {
            root->right->val=(2*root->val)+2;
            v.push_back(root->right->val);
        }
        
        solve(root->left);
        solve(root->right);
    }
    
    bool find(int target) 
    {
        int i;
        for(i=0;i<v.size();i++)
        {
            if(v[i]==target)
                return true;
        }
        return false;
    }
};

/**
 * Your FindElements object will be instantiated and called as such:
 * FindElements* obj = new FindElements(root);
 * bool param_1 = obj->find(target);
 */
