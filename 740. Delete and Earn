I)   RECURSIVE APPROACH

class Solution {
public:
    int solve(vector<int>& v, vector<int>& wt, int n)
    {
        if(n==0)
            return 0;
        
        if(n==1)
            return (v[0]*wt[0]);
        
        if((v[n-1]-1)==v[n-2])
            return max((v[n-1]*wt[n-1])+solve(v,wt,n-2), solve(v,wt,n-1));
        return max((v[n-1]*wt[n-1])+solve(v,wt,n-1), solve(v,wt,n-1));
    }
    
    
    
    int deleteAndEarn(vector<int>& nums) 
    {
        vector<int> v,wt;
        map<int,int> mp;
        int i,n=nums.size();
        for(i=0;i<n;i++)
            mp[nums[i]]++;
        
        for(auto it:mp)
        {
            v.push_back(it.first);
            wt.push_back(it.second);
        }

        n=v.size();
        
        return solve(v,wt,n);
    }
};







II)   MEMOIZED APPROACH

class Solution {
public:
    vector<int> t;
    int solve(vector<int>& v, vector<int>& wt, int n)
    {
        if(n==0)
            return 0;
        
        if(n==1)
            return t[n]=(v[0]*wt[0]);
        
        if(t[n]!=-1)
            return t[n];
        
        if((v[n-1]-1)==v[n-2])
            return t[n]=max((v[n-1]*wt[n-1])+solve(v,wt,n-2), solve(v,wt,n-1));
        return t[n]=max((v[n-1]*wt[n-1])+solve(v,wt,n-1), solve(v,wt,n-1));
    }
    
    
    
    int deleteAndEarn(vector<int>& nums) 
    {
        vector<int> v,wt;
        map<int,int> mp;
        int i,n=nums.size();
        for(i=0;i<n;i++)
            mp[nums[i]]++;
        
        for(auto it:mp)
        {
            v.push_back(it.first);
            wt.push_back(it.second);
        }
        
        n=v.size();
        t=vector<int>(n+1,-1);
        
        return solve(v,wt,n);
    }
};








III)   DYNAMIC PROGRAMMING APPROACH

class Solution {
public:
    int solve(vector<int>& v, vector<int>& wt, int n)
    {        
        int t[n+1];
        int i;
        
        t[0]=0;
        t[1]=(v[0]*wt[0]);
        
        for(i=2;i<n+1;i++)
        {
            if((v[i-1]-1)==v[i-2])
                t[i]=max((v[i-1]*wt[i-1])+t[i-2], t[i-1]);
            else
                t[i]=max((v[i-1]*wt[i-1])+t[i-1], t[i-1]);
        }
        
        return t[n];
    }
    
    
    
    int deleteAndEarn(vector<int>& nums) 
    {
        vector<int> v,wt;
        map<int,int> mp;
        int i,n=nums.size();
        
        for(i=0;i<n;i++)
            mp[nums[i]]++;
        
        for(auto it:mp)
        {
            v.push_back(it.first);
            wt.push_back(it.second);
        }
        
        n=v.size();
        
        return solve(v,wt,n);
    }
};
