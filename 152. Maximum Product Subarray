I)   BRUTE FORCE APPROACH

TC: O(n^2) SC: O(N)

class Solution {
public:
    int solve(vector<int>& v, int n)
    {
        long long int t[n],i,j,mn;
        
        t[0]=v[0];
        mn=t[0];
        for(i=1;i<n;i++)
        {
            if(v[i-1]!=0)
                t[i]=t[i-1]*v[i];
            else
                t[i]=v[i];
            mn=max(mn,t[i]);
        }
        
        for(i=0;i<n;i++)
        {
            for(j=i+1;j<n;j++)
            {
                if(t[j]==0 || t[i]==0)
                    break;
                if(t[i]!=0)
                    mn=max(mn,t[j]/t[i]);
            }
        }
        
        
        // for(i=0;i<n;i++)
        //     cout<<t[i]<<"  ";
        // cout<<endl;
        
        return mn;
    }
    
    
    int maxProduct(vector<int>& nums) 
    {
        int n=nums.size();
        return solve(nums,n);
    }
};






II)   KADANE ALGORITHM APPROACH

// Just Calculate the max product like you calculate the max sum in the Kadane Algo but we also need to calculate the product from right to left because one negative element can cause a negative product in whole array.

// Calculate the maximum product from left and right ends.

TC: O(n) SC: O(1)


class Solution {
public:
    int solve(vector<int>& v, int n)
    {
        int mx=INT_MIN,i,curr=1;
        
        for(i=0;i<n;i++)
        {
            curr=v[i]*curr;
            mx=max(curr,mx);
            if(curr==0)
                curr=1;
        }
        
        curr=1;
        
        for(i=n-1;i>=0;i--)
        {
            curr=v[i]*curr;
            mx=max(curr,mx);
            if(curr==0)
                curr=1;
        }
        
        return mx;
    }
    
    
    int maxProduct(vector<int>& nums) 
    {
        int n=nums.size();
        return solve(nums,n);
    }
};






III)   DYNAMIC PROGRAMMING APPROACH

DP Solution: TC: O(n) SC: O(1)
2 cases that are tricky:

zeros
negative numbers
These cases can disturb the maximum product subarray.
I) Just before you encounter zero save your current product in variable and reset product to zero, after zero again claculate product and compare it with previous saved product.

II) -ve numbers have 2 cases inside them:

if we encounter 1st -ve number in subarray (encountering odd no. of -ve numbers)
then our maximum sum subarray can be disturbed
else we encounter 2nd -ve number in subarray (encountering even no.of -ve numbers)
then our subaaray can be saved, it can contribute to max sum subarray
we will have to keep track of the maximum product up to that number (we will call max_so_far) and minimum product up to that number (we will call min_so_far). The reason behind keeping track of max_so_far is to keep track of the accumulated product of positive numbers. The reason behind keeping track of min_so_far is to properly handle negative numbers.

=> max_so_far is updated by taking the maximum value among:
- Current number
- Product of last max_so_far and current number
- Product of last min_so_far and current number
=> min_so_far is updated in using the same three numbers except that we are taking minimum among the above three numbers.



class Solution {
public:
    int solve(vector<int>& v, int n)
    {
        long long int mx=v[0],mn=v[0],curr=1,i,ans=v[0],temp;
        
        for(i=1;i<n;i++)
        {
            curr=v[i];
            
            temp=max(curr, max(mn*curr,mx*curr));
            mn=min(curr, min(mn*curr,mx*curr));
            
            mx=temp;
            
            ans=max(mx,ans);
        }
        
        return ans;
    }
    
    
    int maxProduct(vector<int>& nums) 
    {
        int n=nums.size();
        return solve(nums,n);
    }
};
