/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> v;
    void solve(TreeNode* root)
    {
        if(root==NULL)
            return ;
        
        if(root!=NULL && root->left==NULL && root->right==NULL)
            v.push_back(root);
        
        if(root->left)
            solve(root->left);
        
        if(root->right)
            solve(root->right);
    }
    
    bool getPath(TreeNode* root, TreeNode* node, vector<int>& s)
    {
        if(root==NULL)
            return false;        
        
        s.push_back(root->val);
        if(root==node)
            return true;
        
        if(getPath(root->left, node, s) || getPath(root->right, node, s))
            return true;
        
        s.pop_back();
        return false;
    }
    
    vector<string> binaryTreePaths(TreeNode* root) 
    {
        solve(root);
        vector<string> vs;
        vector<int> s;
        vector<vector<int>> vt;
        
        for(auto it: v)
        {
            if(getPath(root, it, s))
                vt.push_back(s);
            s.clear();
        }
        
        int i,j;
        string st="";
        
        for(i=0;i<vt.size();i++)
        {
            for(j=0;j<vt[i].size()-1;j++)
                st=st+to_string(vt[i][j])+"->";
            
            st=st+to_string(vt[i][j]);
            vs.push_back(st);
            st="";
        }
        vt.clear();
        v.clear();
        s.clear();        
        
        return vs;
    }
};
