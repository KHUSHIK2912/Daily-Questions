/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) 
    {
        if(root==NULL)
            return NULL;
        
        queue<Node*> q;
        q.push(root);
        Node* node;
        int i,n;
       
        while(!q.empty())
        {
            node=q.front();
            Node* t=node;
            n=q.size();
            for(i=0;i<n;i++)
            {
                node=q.front();
                q.pop();
               
                if(node!=NULL)
                {
                    if(i>0)
                    {
                        t->next=node;
                        t=t->next;
                    }
                   
                    if(node->left)
                        q.push(node->left);
                   
                    if(node->right)
                        q.push(node->right);
                }
            }
            t->next=NULL;
        }
        return root;
    }
};
