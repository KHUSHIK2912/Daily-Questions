class Solution {
public:
    int searchInsert(vector<int>& nums, int target) 
    {
        int n=nums.size(), low=0, high=n-1, mid;
        while(low<=high)
        {
            mid=(low+high)/2;
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]>target)
                high=mid-1;
            else if(nums[mid]<target)
                low=mid+1;
        }
        
        if(nums[0]>target)
            return 0;
        else if(nums[n-1]<target)
            return n;
        
        low=0, high=n-1;
        while(low<=high)
        {
            mid=(low+high)/2;
            
            if(mid+1<n && nums[mid+1]>target && nums[mid]<target)
                return mid+1;
            else if(mid-1>=0 && nums[mid-1]<target && nums[mid]>target)
                return mid;
            
            else if(nums[mid]>target)
                high=mid-1;
            else if(nums[mid]<target)
                low=mid+1;
        }
        
        if(nums[n-1]>target && nums[n-2]<target)
            return n-1;
        else if(nums[0]<target && nums[1]>target)
            return 1;
        
        return 0;
    }
};
