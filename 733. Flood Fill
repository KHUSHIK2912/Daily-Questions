I)  FIRST APPROACH

class Solution {
public:
    void solve(vector<vector<int>>& img, int sr, int sc)
    {
        if(sr>=img.size() || sc>=img[0].size() || sr<0 || sc<0)
            return;
        
        int k=img[sr][sc];
        img[sr][sc]=-1;
        
        if(sr+1<img.size() && img[sr+1][sc]==k)
            solve(img, sr+1, sc);
        
        if(sr-1>=0 && img[sr-1][sc]==k)
            solve(img, sr-1, sc);
        
        if(sc+1<img[0].size() && img[sr][sc+1]==k)
            solve(img, sr, sc+1);
        
        if(sc-1>=0 && img[sr][sc-1]==k)
            solve(img, sr, sc-1);
    }
    vector<vector<int>> floodFill(vector<vector<int>>& img, int sr, int sc, int nc) 
    {
        solve(img, sr, sc);
        
        int i,j;
        
        for(i=0;i<img.size();i++)
        {
            for(j=0;j<img[0].size();j++)
            {
                if(img[i][j]==-1)
                    img[i][j]=nc;
            }
        }
        return img;
    }
};










II)  SECOND APPROACH

class Solution {
public:
    void solve(vector<vector<int>>& img, int sr, int sc, int nc)
    {
        if(sr>=img.size() || sc>=img[0].size() || sr<0 || sc<0)
            return;
        
        int k=img[sr][sc];
        img[sr][sc]=nc;
        
        if(sr+1<img.size() && img[sr+1][sc]==k && img[sr+1][sc]!=nc)
            solve(img, sr+1, sc, nc);
        
        if(sr-1>=0 && img[sr-1][sc]==k && img[sr-1][sc]!=nc)
            solve(img, sr-1, sc, nc);
        
        if(sc+1<img[0].size() && img[sr][sc+1]==k && img[sr][sc+1]!=nc)
            solve(img, sr, sc+1, nc);
        
        if(sc-1>=0 && img[sr][sc-1]==k && img[sr][sc-1]!=nc)
            solve(img, sr, sc-1, nc);
    }
    vector<vector<int>> floodFill(vector<vector<int>>& img, int sr, int sc, int nc) 
    {
        solve(img, sr, sc, nc);
        return img;
    }
};
