class Solution {
public:
    int countSubsets(vector<int>& nums, int sum, int n)
    {
        int i,j;
        
        int t[n+1][sum+1];
        t[0][0]=1;
        for(j=1;j<=sum;j++)
            t[0][j]=0;
        
        for(i=1;i<n+1;i++)
        {
            for(j=0;j<sum+1;j++)   //to consider all zeros in an array, do not initialize columns
            {
                if(nums[i-1]<=j)
                    t[i][j]=t[i-1][j-nums[i-1]] + t[i-1][j];
                else
                    t[i][j]=t[i-1][j];
            }
        }
        return t[n][sum];
    }
    
    int findTargetSumWays(vector<int>& nums, int target) 
    {
        int i,s,n=nums.size(),sum=0;
        for(i=0;i<nums.size();i++)
            sum=sum+nums[i];
            
        //possible answer only exist if this condition is false, that is, target should be less than sum and the sum of target and sum should be divisible by 2
        if (abs(target) > sum || (sum + target) % 2 != 0)  
            return 0;
        
        s=(sum+target)/2;
        return countSubsets(nums,s,n);
    }
};
