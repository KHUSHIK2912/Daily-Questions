ALGORITHM:-

After every move, the number of elements will be halved
Now two for each type of move:-
(i) Elimination from left to right: the firstmost element is bound to be removed, so we have to shift our starting pointer to the right (by no. of steps)
(ii) Elimination from right to left: the starting element will be removed only if the number of elements left is odd. Only in that case our starting pointer would be shifted to the right otherwise not.

Now how do we decide the number of steps by which the starting pointer needs to be shifted?
If we notice properly, the no. of elements getting eliminated each time is n/2. So the step(difference)
between remaining elements increases by x2 each time.
So the no. of step/difference doubles with every move that we perform.


class Solution {
public:
    int last(int n, int st, int jump, bool left)
    {
        if(n<=1)
            return st;
        
        if(left)
            st+=jump;
        
        if(left==false && n%2!=0)
            st+=jump;
        
        return last(n/2,st,jump*2,!left);
            
    }
    
    int lastRemaining(int n) 
    {
        if(n==1)
            return 1;
        
        int st=1,jump=1;
        bool left=true;
        
        return last(n,st,jump,left);
    }
};
