APPROACH - I) RECURSIVE APPROACH

class Solution {
public:
    int LIS(vector<vector<int>>& v, int i, int j, int n)
    {
        if(i>=n || j>=n)
            return 0;
        
        if(v[i][0]<=v[j][0] && v[i][1]<=v[j][1])
            return max(v[j][0]+LIS(v, j, j+1, n), LIS(v, i, j+1, n));
        
        return LIS(v, i, j+1, n);
    }
    int bestTeamScore(vector<int>& scores, vector<int>& ages) 
    {
        int i,n=ages.size(),mx=0,ans=0;
        
        vector<vector<int>> v;
        for(i=0;i<n;i++)
            v.push_back({scores[i], ages[i]});
        
        sort(v.begin(), v.end());
        
        for(i=0;i<v.size();i++)
        {
            ans=v[i][0]+LIS(v, i, i+1, n);
            mx=max(mx,ans);
        }
        mx=max(mx,ans);
        return mx;
    }
};








APPROACH - II)  MEMOIZED APPROACH

class Solution {
public:
    vector<vector<int>> t;
    int LIS(vector<vector<int>>& v, int i, int j, int n)
    {
        if(i>=n || j>=n)
            return 0;
        
        if(t[i][j]!=-1)
            return t[i][j];
        
        if(v[i][0]<=v[j][0] && v[i][1]<=v[j][1])
            return t[i][j]=max(v[j][0]+LIS(v, j, j+1, n), LIS(v, i, j+1, n));
        
        return t[i][j]=LIS(v, i, j+1, n);
    }
    int bestTeamScore(vector<int>& scores, vector<int>& ages) 
    {
        int i,n=ages.size(),mx=0,ans=0;
        vector<vector<int>> v;
        for(i=0;i<n;i++)
            v.push_back({scores[i], ages[i]});
        
        sort(v.begin(), v.end());
        
        t=vector<vector<int>> (n+1, vector<int>(n+1, -1));
        
        for(i=0;i<v.size();i++)
        {
            ans=v[i][0]+LIS(v, i, i+1, n);
            mx=max(mx,ans);
        }
        mx=max(mx,ans);
        return mx;
    }
};








APPROACH - III)  DYNAMIC PROGRAMMING APPROACH

class Solution {
public:
    int LIS(vector<vector<int>>& v, int n)
    {
        int t[n];
        int i,j;
        
        for(i=0;i<n;i++)
            t[i]=v[i][0];
        
        for(i=0;i<n;i++)
        {
            for(j=0;j<i;j++)
            {
                if(v[i][0]>=v[j][0] && v[i][1]>=v[j][1])
                    t[i]=max(t[i],v[i][0]+t[j]);
            }
        }
        return *max_element(t,t+n);
    }
    int bestTeamScore(vector<int>& scores, vector<int>& ages) 
    {
        int i,n=ages.size();
        
        if(n==1)
            return scores[0];
            
        vector<vector<int>> v;
        for(i=0;i<n;i++)
            v.push_back({scores[i], ages[i]});
        
        sort(v.begin(), v.end());
        
        return LIS(v, n);
    }
};
