APPROACH - I)  RECURSIVE APPROACH

class Solution {
public:
    int solve(vector<int>& v, int n, int k, int buy)
    {
        if(n<=0 || k<=0)
            return 0;
            
        if(buy)
            return max(v[n-1]+solve(v,n-1,k-1,0), solve(v,n-1,k,1));
        
        return max(-v[n-1]+solve(v,n-1,k,1), solve(v,n-1,k,0));  
    }
    int maxProfit(int k, vector<int>& prices) 
    {
        int n=prices.size();
        reverse(prices.begin(), prices.end());
        return solve(prices,n,k,0);
    }
};






APPROACH - II)  MEMOIZED APPROACH

class Solution {
public:
    vector<vector<vector<int>>> t;
    int solve(vector<int>& v, int n, int k, int buy)
    {
        if(n<=0 || k<=0)
            return 0;
        
        if(t[n][k][buy]!=-1)
            return t[n][k][buy];
        
        int profit;
        if(buy)
            profit=max(v[n-1]+solve(v,n-1,k-1,0), solve(v,n-1,k,1));
        
        else
            profit=max(-v[n-1]+solve(v,n-1,k,1), solve(v,n-1,k,0));    
        
        return t[n][k][buy]=profit;
    }
    int maxProfit(int k, vector<int>& prices) 
    {
        int n=prices.size();
        reverse(prices.begin(), prices.end());
        t=vector<vector<vector<int>>>(n+1, vector<vector<int>>(k+1, vector<int>(2,-1)));
        return solve(prices,n,k,0);
    }
};








APPROACH - III)  DYNAMIC PROGRAMMING 

class Solution {
public:
    int solve(vector<int>& v, int n, int x, int buy)
    {
        int i,j,k;
        int t[n+1][x+1][2];
        
        for(i=0;i<n+1;i++)
        {
            for(j=0;j<x+1;j++)
            {
                for(k=0;k<2;k++)
                {
                    if(i==0 || j==0)
                        t[i][j][k]=0;
                }
            }
        }
        
        for(i=1;i<n+1;i++)
        {
            for(j=1;j<x+1;j++)
            {
                for(k=0;k<2;k++)
                {
                    if(k==1)
                        t[i][j][k]=max(v[i-1]+t[i-1][j-1][0], t[i-1][j][1]);
                    else
                        t[i][j][k]=max(-v[i-1]+t[i-1][j][1], t[i-1][j][0]);
                }
            }
        }
        
        return t[n][x][0];
    }
    int maxProfit(int k, vector<int>& prices) 
    {
        int n=prices.size();
        reverse(prices.begin(), prices.end());
        return solve(prices,n,k,0);
    }
};
