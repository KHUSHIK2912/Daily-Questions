APPROACH - I)  RECURSIVE APPROACH

class Solution {
public:
    int solve(vector<int>& v, int n, int buy)
    {
        if(n<=0)
            return 0;
            
        if(buy)
            return max(v[n-1]+solve(v,n-2,0), solve(v,n-1,1));
        
        return max(-v[n-1]+solve(v,n-1,1), solve(v,n-1,0));  
    }
    int maxProfit(vector<int>& prices) 
    {
        int n=prices.size();
        reverse(prices.begin(), prices.end());
        return solve(prices,n,0);
    }
};






APPROACH - II)  MEMOIZED APPROACH

class Solution {
public:
    vector<vector<int>> t;
    int solve(vector<int>& v, int n, int buy)
    {
        if(n<=0)
            return 0;
        
        if(t[n][buy]!=-1)
            return t[n][buy];
        
        int profit;
        if(buy)
            profit=max(v[n-1]+solve(v,n-2,0), solve(v,n-1,1));
        
        else
            profit=max(-v[n-1]+solve(v,n-1,1), solve(v,n-1,0));    
        
        return t[n][buy]=profit;
    }
    int maxProfit(vector<int>& prices) 
    {
        int n=prices.size();
        reverse(prices.begin(), prices.end());
        t=vector<vector<int>>(n+1, vector<int>(2,-1));
        return solve(prices,n,0);
    }
};








APPROACH - III)  DYNAMIC PROGRAMMING 

class Solution {
public:
    int solve(vector<int>& v, int n, int buy)
    {
        int i,j;
        int t[n+1][2];
        
        for(i=0;i<n+1;i++)
        {
            for(j=0;j<2;j++)
            {
                if(i==0)
                    t[i][j]=0;
            }
        }
        
        for(j=0;j<2;j++)
        {
            if(j==0)
                t[1][j]=max(-v[0]+t[0][1], t[0][0]); 
            else
                t[1][j]=max(v[0]+t[0][0], t[0][1]);
        }
        
        
        for(i=2;i<n+1;i++)
        {
            for(j=0;j<2;j++)
            {
                if(j==1)
                    t[i][j]=max(v[i-1]+t[i-2][0], t[i-1][1]);
                else
                    t[i][j]=max(-v[i-1]+t[i-1][1], t[i-1][0]);                
            }
        }
        
        return t[n][0];
    }
    int maxProfit(vector<int>& prices) 
    {
        int n=prices.size();
        reverse(prices.begin(), prices.end());
        return solve(prices,n,0);
    }
};
