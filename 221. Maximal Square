I)  PREFIX SUM + DYNAMIC PROGRAMMING            

class Solution {
public:
    vector<vector<int>> mat;
    
    int maximalSquare(vector<vector<char>>& v) 
    {
        int i,j,r1,c1,r2,c2,n=v.size(),m=v[0].size(),mx=0,ans,sum,t,flag=0,fl=0;
        
        mat=vector<vector<int>>(n+1, vector<int>(m+1,0));
        
        for(j=1;j<m+1;j++)
            mat[1][j]=mat[1][j-1]+(v[0][j-1]-'0');
        
        for(i=2;i<n+1;i++)
        {
            for(j=1;j<m+1;j++)
                mat[i][j]=mat[i][j-1]+(v[i-1][j-1]-'0')+mat[i-1][j]-mat[i-1][j-1];
        }
        
        
        for(i=n-1;i>=0;i--)
        {
            for(j=m-1;j>=0;j--)
            {
                if(v[i][j]=='1')
                {
                    flag=1;
                    t=min(i,j);
                    r1=i-t;
                    c1=j-t;
                    r2=i;
                    c2=j;
                    fl=0;
                    
                    while(r1<r2 && c1<c2)
                    {
                        sum=mat[r2+1][c2+1]-mat[r1][c2+1]-mat[r2+1][c1]+mat[r1][c1];
                        ans=pow((r2-r1+1), 2);
                        
                        if(ans==sum)
                        {
                            fl=1;
                            break;
                        }
                        r1=r1+1;
                        c1=c1+1;
                    }
                    if(fl==1)
                    mx=max(mx,ans);
                }
            }
        }
        if(mx==0 && flag==1)
            return 1;
        return mx;
    }
};



TIME COMPLEXITY = O(N * M * MIN(N,M))








II)  RECURSIVE APPROACH

class Solution {
public:
    int solve(vector<vector<char>>& v, int i, int j)
    {
        if(i<0 || j<0 || i>=v.size() || j>=v[0].size() || v[i][j]=='0')
            return 0;
        
        return 1 + min( solve(v,i+1,j+1), min(solve(v,i+1,j), solve(v,i,j+1)) );
    }
    
    int maximalSquare(vector<vector<char>>& v) 
    {
        int n=v.size(), m=v[0].size(),i,j,ans=INT_MIN;
        
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(v[i][j]=='1')
                    ans=max(ans,solve(v,i,j));
            }
        }
        
        if(ans==INT_MIN)
            return 0;
        return ans*ans;
    }
};







III)  MEMOIZED APPROACH

class Solution {
public:
    vector<vector<int>> t;
    
    int solve(vector<vector<char>>& v, int i, int j)
    {
        if(i<0 || j<0 || i>=v.size() || j>=v[0].size() || v[i][j]=='0')
            return 0;
        if(t[i][j]!=-1)
            return t[i][j];
        
        return t[i][j] = 1 + min( solve(v,i+1,j+1), min(solve(v,i+1,j), solve(v,i,j+1)) );
    }
    
    int maximalSquare(vector<vector<char>>& v) 
    {
        int n=v.size(), m=v[0].size(),i,j,ans=INT_MIN;
        
        t=vector<vector<int>>(n+1, vector<int>(m+1,-1));
        
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(v[i][j]=='1')
                    ans=max(ans,solve(v,i,j));
            }
        }
        
        if(ans==INT_MIN)
            return 0;
        return ans*ans;
    }
};






IV)  DYNAMIC PROGRAMMING APPROACH

class Solution {
public:
    int solve(vector<vector<char>>& v)
    {
        int i,j,ans=INT_MIN,n=v.size(),m=v[0].size();
        int t[n+1][m+1];
        
        for(i=0;i<n+1;i++)
        {
            for(j=0;j<m+1;j++)
                t[i][j]=0;
        }
        
        for(i=n-1;i>=0;i--)
        {
            for(j=m-1;j>=0;j--)
            {
                if(v[i][j]=='1')
                    t[i][j]=1+min(t[i+1][j+1], min(t[i+1][j], t[i][j+1]));
                
                else
                    t[i][j]=0;
                
                ans=max(ans, t[i][j]);
            }
        }
        return ans*ans;
    }
    
    int maximalSquare(vector<vector<char>>& v) 
    {
        return solve(v);
    }
};


TIME COMPLEXITY = O(N * M)
