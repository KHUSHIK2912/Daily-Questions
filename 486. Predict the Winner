APPROACH - I)  RECURSIVE APPROACH

class Solution {
public:
    long long int solve(vector<int>& nums, int i, int j, int n)
    {
        if(i>j)
            return 0;
            
        return max(nums[i]+min(solve(nums,i+1,j-1,n),solve(nums,i+2,j,n)), nums[j]+min(solve(nums,i+1,j-1,n),solve(nums,i,j-2,n)));
    }
    bool PredictTheWinner(vector<int>& nums) 
    {
        int n=nums.size(),i,sum=0;
        
        for(i=0;i<n;i++)
            sum+=nums[i];
        
        i=solve(nums,0,n-1,n);
        
        if(i>=sum-i)
            return true;
        return false;
    }
};







APPROACH - II)  MEMOIZATION APPROACH

class Solution {
public:
    vector<vector<long long int>> t;
    long long int solve(vector<int>& nums, int i, int j, int n)
    {
        if(i>j)
            return 0;
        
        if(t[i][j]!=-1)
            return t[i][j];
            
        return t[i][j]=max(nums[i]+min(solve(nums,i+1,j-1,n),solve(nums,i+2,j,n)), nums[j]+min(solve(nums,i+1,j-1,n),solve(nums,i,j-2,n)));
    }
    bool PredictTheWinner(vector<int>& nums) 
    {
        int n=nums.size(),i,sum=0;
        
        for(i=0;i<n;i++)
            sum+=nums[i];
        
        t=vector<vector<long long int>>(n+1, vector<long long int>(n+1,-1));
        
        i=solve(nums,0,n-1,n);
        
        if(i>=sum-i)
            return true;
        return false;
    }
};
