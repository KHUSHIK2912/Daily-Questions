/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int flag;
    bool getpath(TreeNode* root, ListNode* t)
    {
        if(root==NULL && t!=NULL)
            return false;
        if(t==NULL)
            return true;
        
        if(root->val!=t->val)
            return false;
        
        if(getpath(root->left, t->next) || getpath(root->right, t->next))
            return true;
        
        return false;
    }
    void solve(TreeNode* root, ListNode* head)
    {
        if(root==NULL)
            return;
        
        if(root->val==head->val)
        {
            if(getpath(root, head))
            {
                flag=1;
                return ;
            }
        }
        
        solve(root->left, head);
        solve(root->right, head);
    }
    
    bool isSubPath(ListNode* head, TreeNode* root) 
    {
        flag=0;
        solve(root, head);
        
        if(flag==1)
            return true;
        return false;
    }
};
