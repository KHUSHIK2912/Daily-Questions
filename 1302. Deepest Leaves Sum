/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) 
    {
        if(root==NULL)
            return -1;
        
        queue<TreeNode*> q;
        q.push(root);
        q.push(NULL);
        int sum=0,level=0;
        
        //First find the total number of levels in the tree
        
        while(!q.empty())
        {
            TreeNode* node=q.front();
            q.pop();
            
            if(node!=NULL)
            {
                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right);
            }
            else if(!q.empty())
            {
                q.push(NULL);
                level++;
            }
        }
        
        int k=0;
        q.push(root);
        q.push(NULL);
        
        while(!q.empty())
        {
            TreeNode* node=q.front();
            q.pop();
            
            if(node!=NULL)
            {
                if(k==level)
                    sum=sum+node->val;
                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right);
            }
            else if(!q.empty())
            {
                q.push(NULL);
                k++;
            }
        }
        
        return sum;
    }
};
