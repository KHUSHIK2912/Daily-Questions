I)  RECURSIVE APPROACH

class Solution {
public:
    int solve(vector<int>& v, int n)
    {
        if(n==0)
            return 0;
        if(n==1)
            return t[n]=v[0];
        
        return t[n]=max(v[n-1]+solve(v,n-2), solve(v,n-1));
    }
    
    
    int rob(vector<int>& nums) 
    {
        int n=nums.size();
        
        return solve(nums,n);
    }
};





II)  MEMOIZED APPROACH

class Solution {
public:
    vector<int> t;
    int solve(vector<int>& v, int n)
    {
        if(n==0)
            return 0;
        if(n==1)
            return t[n]=v[0];
        
        if(t[n]!=-1)
            return t[n];
        
        return t[n]=max(v[n-1]+solve(v,n-2), solve(v,n-1));
    }
    
    
    int rob(vector<int>& nums) 
    {
        int n=nums.size();
        t=vector<int>(n+1,-1);
        
        return solve(nums,n);
    }
};





III)  DYNAMIC PROGRAMMING APPROACH

class Solution {
public:
    int solve(vector<int>& v, int n)
    {
        if(n==0)
            return 0;
        
        int t[n+1],i;
        t[0]=0;
        t[1]=v[0];
        
        for(i=2;i<n+1;i++)
        {
            t[i]=max(v[i-1]+t[i-2], t[i-1]);
        }
        
        return t[n];
    }
    
    
    int rob(vector<int>& nums) 
    {
        int n=nums.size();
        
        return solve(nums,n);
    }
};
