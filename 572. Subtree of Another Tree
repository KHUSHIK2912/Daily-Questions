/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSame(TreeNode* p, TreeNode* q)
    {
        if(p==NULL && q==NULL)
            return true;
        
        if((p==NULL && q!=NULL) || (p!=NULL && q==NULL))
            return false;
        
        if(p->val!=q->val)
            return false;
        
        return (isSame(p->left, q->left) && isSame(p->right, q->right));
    }
    
    bool isSubtree(TreeNode* root, TreeNode* subRoot) 
    {
        if(root==NULL && subRoot==NULL)
            return true;
        
        queue<TreeNode*> q;
        q.push(root);
        TreeNode* node;
        int i,n;
        
        while(!q.empty())
        {
            n=q.size();
            for(i=0;i<n;i++)
            {
                node=q.front();
                q.pop();
                
                if(node)
                {
                    if(node->val==subRoot->val)
                    {
                        if(isSame(node, subRoot))
                            return true;
                    }
                    
                    if(node->left)
                        q.push(node->left);
                    if(node->right)
                        q.push(node->right);
                }
            }
        }        
        
        return false;        
    }
};
