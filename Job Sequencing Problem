/*
struct Job
{
    int id; // Job Id
    int dead; // Deadline of Job
    int profit; // Profit if job is over before or on deadline
}
*/


class Solution 
{
    public:
    //Function to find the maximum profit and the number of jobs done.
    static bool comp(Job j1,Job j2)
    {
        return j1.profit>j2.profit;
    }
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        sort(arr,arr+n,comp);
        
        int i,j,sum,c=0,m=0,t;
        
        for(i=0;i<n;i++)
        m=max(m,arr[i].dead);
        
        vector<int> dur(m,0);
        
        for(i=0;i<n;i++)
        {
            t=arr[i].dead;
            for(j=t-1;j>=0;j--)
            {
                if(dur[j]==0)
                {
                    sum+=arr[i].profit;
                    c++;
                    dur[j]=1;
                    break;
                }
            }
        }
        vector<int> ans;
        ans.push_back(c);
        ans.push_back(sum);
        return ans;
    } 
};
