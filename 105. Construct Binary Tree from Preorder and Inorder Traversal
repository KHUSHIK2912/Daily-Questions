/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int idx;
    int search(vector<int>& inorder, int st, int end, int curr)
    {
        int i;
        for(i=st;i<=end;i++)
        {
            if(inorder[i]==curr)
                return i;
        }
        return -1;
    }
    TreeNode* build(vector<int>& preorder, vector<int>& inorder, int st, int end)
    {
        if(st>end)
            return NULL;
        
        int curr=preorder[idx++];
        
        TreeNode* node=new TreeNode (curr);
        
        if(st==end)
            return node;
        
        int pos=search(inorder, st, end, curr);
        
        node->left=build(preorder, inorder, st, pos-1);
        node->right=build(preorder, inorder, pos+1, end);
        
        return node;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) 
    {
        int n=preorder.size();
        idx=0;
        TreeNode* node=build(preorder, inorder, 0, n-1);
        return node;
    }
};
