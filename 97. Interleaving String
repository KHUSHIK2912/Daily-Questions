APPROACH - I)   RECURSIVE APPROACH

class Solution {
public:
    bool solve(string s1, string s2, string s3, int n1, int n2, int n3)
    {
        if(n3>0 && (n2<=0 && n1<=0))
            return false;
        
        if(n3<=0 && n2<=0 && n1<=0)
            return true;
        
        if(n1>0 && s3[n3-1]==s1[n1-1] && n2>0 && s3[n3-1]==s2[n2-1])
            return (solve(s1,s2,s3,n1-1,n2,n3-1) || solve(s1,s2,s3,n1,n2-1,n3-1));
        
        if(n1>0 && s3[n3-1]==s1[n1-1])
            return solve(s1,s2,s3,n1-1,n2,n3-1);
        
        else if(n2>0 && s3[n3-1]==s2[n2-1])
            return solve(s1,s2,s3,n1,n2-1,n3-1);
        
        return false;
    }
    bool isInterleave(string s1, string s2, string s3) 
    {
        int n1=s1.size(), n2=s2.size(), n3=s3.size();
        
        if(n3!=(n1+n2))
            return false;
            
        return solve(s1,s2,s3,n1,n2,n3);
    }
};






APPROACH - II)   MEMOIZATION APPROACH

class Solution {
public:
    vector<vector<int>> t;
    bool solve(string s1, string s2, string s3, int n1, int n2, int n3)
    {
        if(n3>0 && (n2<=0 && n1<=0))
            return false;
        
        if(n3<=0 && n2<=0 && n1<=0)
            return true;
        
        if(t[n1][n2]!=-1)
            return t[n1][n2];
        
        if(n1>0 && s3[n3-1]==s1[n1-1] && n2>0 && s3[n3-1]==s2[n2-1])
            return t[n1][n2]=(solve(s1,s2,s3,n1-1,n2,n3-1) || solve(s1,s2,s3,n1,n2-1,n3-1));
        
        if(n1>0 && s3[n3-1]==s1[n1-1])
            return t[n1][n2]=solve(s1,s2,s3,n1-1,n2,n3-1);
        
        else if(n2>0 && s3[n3-1]==s2[n2-1])
            return t[n1][n2]=solve(s1,s2,s3,n1,n2-1,n3-1);
        
        return t[n1][n2]=false;
    }
    bool isInterleave(string s1, string s2, string s3) 
    {
        int n1=s1.size(), n2=s2.size(), n3=s3.size();
        
        if(n3!=(n1+n2))
            return false;
        
        t=vector<vector<int>> (n1+1, vector<int>(n2+1,-1));
        return solve(s1,s2,s3,n1,n2,n3);
    }
};
