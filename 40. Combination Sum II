class Solution {
public:
    vector<int> v;
    set<vector<int>> ans;
    void dfs(vector<int>& can, int i, int n, int& sum)
    {
        if(i>=n || sum<0)
            return ;        
        
        sum-=can[i];
        v.push_back(can[i]);
        
        if(sum==0)
            ans.insert(v);
        
        dfs(can, i+1, n, sum);
        
        sum+=can[i];
        v.pop_back();
        
        while(i+1<n && can[i]==can[i+1])
            i++;
        dfs(can, i+1, n, sum);
        
    }
    vector<vector<int>> combinationSum2(vector<int>& nums, int target) 
    {
        sort(nums.begin(), nums.end());
        int n=nums.size();
        dfs(nums, 0, n, target);
        
        vector<vector<int>> res;
        for(auto it:ans)
            res.push_back(it);
        return res;
    }
};
