class Solution {
public:
    vector<int> NSL(vector<int>& arr, int n)
    {
        int i;
        stack<pair<int,int>> st;
        vector<int> v;
        
        for(i=0;i<n;i++)
        {
            if(st.size()==0)
            v.push_back(-1);
            else if(st.size()>0 && st.top().first<arr[i])
            v.push_back(st.top().second);
            else if(st.size()>0 && st.top().first>=arr[i])
            {
                while(!st.empty() && st.top().first>=arr[i])
                st.pop();
                
                if(st.empty())
                v.push_back(-1);
                else
                v.push_back(st.top().second);
            }
            
            st.push({arr[i], i});
        }
        
        return v;
    }
    
    vector<int> NSR(vector<int>& arr, int n)
    {
        int i;
        stack<pair<int,int>> st;
        vector<int> v;
        
        for(i=n-1;i>=0;i--)
        {
            if(st.size()==0)
            v.push_back(n);
            else if(st.size()>0 && st.top().first<arr[i])
            v.push_back(st.top().second);
            else if(st.size()>0 && st.top().first>=arr[i])
            {
                while(!st.empty() && st.top().first>=arr[i])
                st.pop();
                
                if(st.empty())
                v.push_back(n);
                else
                v.push_back(st.top().second);
            }
            
            st.push({arr[i], i});
        }
        reverse(v.begin(), v.end());
        return v;
    }
    
    
    int largestRectangleArea(vector<int>& hts) 
    {
        int i,mx=0,t,n=hts.size();
        vector<int> left,right;
        left=NSL(hts,n);
        right=NSR(hts,n);        
        
        for(i=0;i<n;i++)
        {
            left[i]=(right[i]-left[i]-1);
            t=hts[i]*left[i];
            mx=max(mx,t);
        }
        
        return mx;
    }
};
