APPROACH - I  (BRUTE FORCE)

class Solution {
public:
    int maxProfit(vector<int>& v) 
    {
        int i,n=v.size(),mx=0,j;
        for(i=0;i<n;i++)
        {
            for(j=i+1;j<n;j++)
              mx=max(mx,v[j]-v[i]);
        }        
        return mx;
    }
};


TIME COMPLEXITY= O(N^2)
SPACE COMPLEXITY= O(1)



APPROACH - II  (DYNAMIC PROGRAMMING)

class Solution {
public:

    int profit(vector<int>& v, int n)
    {        
        int i,j;
        int t[n+1][n+1];
        for(i=0;i<n+1;i++)
        {
            for(j=0;j<n+1;j++)
                t[i][j]=0;
        }
        
        for(i=1;i<n+1;i++)
        {
            for(j=1;j<n+1;j++)
            {
                if(i<j)
                {
                    t[i][j]=max(t[i][j-1],(v[j-1]-v[i-1]));
                }
                else if(i==j)
                    t[i][j]=t[i-1][n];
            }
        }
        
        // for(i=0;i<n+1;i++)
        // {
        //     for(j=0;j<n+1;j++)
        //         cout<<t[i][j]<<"  ";
        //     cout<<endl;
        // }
        
        return t[n][n];         
    }
    
    int maxProfit(vector<int>& v) 
    {
        int i,n=v.size(),mx=0,j;
        mx=profit(v,n);
        
        return mx;
    }
};

TIME COMPLEXITY= O(N^2)
SPACE COMPLEXITY= O(N^2)




APPROACH - III  (GREEDY APPROACH)

class Solution {
public:
    int maxProfit(vector<int>& v) 
    {
        int i,n=v.size(),mx=0,buy=v[0];
        
        for(i=1;i<n;i++)
        {
            if(buy>v[i])
                buy=v[i];
            
            else if((v[i]-buy)>mx)
                mx=v[i]-buy;
        }        
        return mx;
    }
};

TIME COMPLEXITY= O(N)
SPACE COMPLEXITY= O(1)




APPROACH - IV   (MEMOIZATION)

class Solution {
public:
    int profit(vector<int>& v, int i, int k, bool buy, vector<vector<int>>& t)
    {
        if(i>=v.size() || k<=0)
            return 0;
        
        if(t[i][buy]!=-1)
            return t[i][buy];
        
        if(buy)
            return t[i][buy]=max(-v[i]+profit(v,i+1,k,!buy,t), profit(v,i+1,k,buy,t));
        
        else
            return t[i][buy]=max(v[i]+profit(v,i+1,k-1,!buy,t), profit(v,i+1,k,buy,t));
         
    }
    int maxProfit(vector<int>& v) 
    {
        int i,n=v.size(); 
        vector<vector<int>> t(n, vector<int>(2,-1));
        
        return profit(v,0,1,1,t);
    }
};


TIME COMPLEXITY= O(N)
SPACE COMPLEXITY= O(N)


