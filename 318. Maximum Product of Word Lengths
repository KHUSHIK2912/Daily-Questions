//Brute force approach and should be optimized

class Solution {
public:
int maxProduct(vector<string>& words) 
    {
        int i=0,j,c,mx=INT_MIN,k,flag=0;
        for(i=0;i<words.size();i++)
        {
            for(j=i+1;j<words.size();j++)
            {
                flag=0;
                for(k=0;k<words[i].size();k++)
                {
                    if(words[j].find(words[i][k])!=-1)
                    {
                        flag=1;
                        break;
                    }
                }
                if(flag==0)
                {
                    c=words[i].size()*words[j].size();
                    mx=max(mx,c);
                }
            }
        }
        if(mx==INT_MIN)
            return 0;
        return mx;        
    }
};










class Solution {
public:
    bool same(string a, string b)
    {
        int i;
        for(i=0;i<a.size();i++)
        {
            if(b.find(a[i])!=-1)
                return false;
        }
        return true;
    }
    
    int maxProduct(vector<string>& words) 
    {
        int i=0,j,c,mx=INT_MIN;
        for(i=0;i<words.size();i++)
        {
            for(j=i+1;j<words.size();j++)
            {
                if(same(words[i],words[j]))
                {
                    c=words[i].size()*words[j].size();
                    mx=max(mx,c);
                }
            }
        }
        if(mx==INT_MIN)
            return 0;
        return mx;        
    }
};
