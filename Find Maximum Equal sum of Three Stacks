APPROACH - I)  BRUTE FORCE

class Solution{
public:
    int maxEqualSum(int n1,int n2,int n3,vector<int> &s1,vector<int> &s2,vector<int> &s3)
    {     
        int i,j,sum=0;
        map<int,int, greater<int>> mp;
        
        for(i=0;i<n1;i++)
        sum+=s1[i];
        
        for(i=0;i<n1;i++)
        {
            mp[sum]=1;
            sum=sum-s1[i];
        }
        sum=0;
        
        for(i=0;i<n2;i++)
        sum+=s2[i];
        
        for(i=0;i<n2;i++)
        {
            if(mp.find(sum)!=mp.end())
            {
                if(mp[sum]==1)
                mp[sum]=2;
            }
            sum=sum-s2[i];
        }
        sum=0;
        
        for(i=0;i<n3;i++)
        sum+=s3[i];
        
        for(i=0;i<n3;i++)
        {
            if(mp.find(sum)!=mp.end())
            {
                if(mp[sum]==2)
                mp[sum]=3;
            }
            sum=sum-s3[i];
        }
        
        for(auto it: mp)
        {
            if(it.second==3)
            return it.first;
        }
        return 0;
    }
};








APPROACH -II)  STACK APPROACH


class Solution{
public:
    int maxEqualSum(int n1,int n2,int n3,vector<int> &s1,vector<int> &s2,vector<int> &s3)
    {
        int i,j,k,sum1=0,sum2=0,sum3=0;
        for(i=0;i<n1;i++)
        sum1+=s1[i];
        
        for(i=0;i<n2;i++)
        sum2+=s2[i];
        
        for(i=0;i<n3;i++)
        sum3+=s3[i];
        
        if(sum1==sum2 && sum1==sum3)
        return sum1;
        
        i=0;j=0;k=0;
        while(i<n1 && j<n2 && k<n3)
        {
            if(sum1==sum2 && sum1==sum3)
            return sum1;
            
            if(sum1>=sum2 && sum1>=sum3)
            {
                sum1-=s1[i];
                i++;
            }
            
            else if(sum1<=sum2 && sum2>=sum3)
            {
                sum2-=s2[j];
                j++;
            }
            
            else if(sum3>=sum2 && sum1<=sum3)
            {
                sum3-=s3[k];
                k++;
            }
        }
        
        return 0;
};

TIME COMPLEXITY = O(n1+n2+n3)
