class Solution {
public:
    vector<vector<int>> queensAttacktheKing(vector<vector<int>>& queens, vector<int>& king) 
    {
        int i=king[0],j=king[1],k;
        vector<vector<int>> v;
        vector<int> vt={0,0};
        
        //Left Upper Diagonal
        while(i>=0 && j>=0)
        {
            vt[0]=i-1;
            vt[1]=j-1;
            i--;
            j--;
            if(find(queens.begin(),queens.end(), vt)!=queens.end())
            {
                v.push_back(vt);
                break;
            }
        }
        
        
        //Upper
        i=king[0],j=king[1];
        vt[1]=j;
        
        while(i>=0)
        {
            vt[0]=i-1;
            i--;
            if(find(queens.begin(),queens.end(), vt)!=queens.end())
            {
                v.push_back(vt);
                break;
            }
        }
        
        //Right Upper Diagonal
        i=king[0],j=king[1];
        
        while(i>=0 && j<8)
        {
            vt[0]=i-1;
            vt[1]=j+1;
            i--;
            j++;
            if(find(queens.begin(),queens.end(), vt)!=queens.end())
            {
                v.push_back(vt);
                break;
            }
        }
        
        //Right 
        i=king[0],j=king[1];
        vt[0]=i;
        
        while(i>=0 && j<8)
        {
            vt[1]=j+1;
            j++;
            if(find(queens.begin(),queens.end(), vt)!=queens.end())
            {
                v.push_back(vt);
                break;
            }
        }
        
        //Right Lower Diagonal
        i=king[0],j=king[1];
        
        while(i<8 && j<8)
        {
            vt[0]=i+1;
            vt[1]=j+1;
            i++;
            j++;
            if(find(queens.begin(),queens.end(), vt)!=queens.end())
            {
                v.push_back(vt);
                break;
            }
        }
        
        //Down
        i=king[0],j=king[1];
        vt[1]=j;
        
        while(i<8 && j>=0)
        {
            vt[0]=i+1;
            i++;
            if(find(queens.begin(),queens.end(), vt)!=queens.end())
            {
                v.push_back(vt);
                break;
            }
        }
        
        //Left Lower Diagonal
        i=king[0],j=king[1];
        
        while(i<8 && j>=0)
        {
            vt[0]=i+1;
            vt[1]=j-1;
            i++;
            j--;
            if(find(queens.begin(),queens.end(), vt)!=queens.end())
            {
                v.push_back(vt);
                break;
            }
        }
        
        //Left
        i=king[0],j=king[1];
        vt[0]=i;
        
        while(i<8 && j>=0)
        {
            vt[1]=j-1;
            j--;
            if(find(queens.begin(),queens.end(), vt)!=queens.end())
            {
                v.push_back(vt);
                break;
            }
        }
        return v;
    }
};
