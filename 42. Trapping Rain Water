APPROACH - I)  BRUTE FORCE APPROACH

class Solution {
public:
    int trap(vector<int>& ht) 
    {
        int i,n=ht.size(),ans=0;
        vector<int> mxleft(n),mxright(n);
        
        mxleft[0]=ht[0];        
        for(i=1;i<n;i++)
            mxleft[i]=max(mxleft[i-1],ht[i]);
        
        mxright[n-1]=ht[n-1];
        for(i=n-2;i>=0;i--)
            mxright[i]=max(mxright[i+1],ht[i]);
        
        for(i=0;i<n;i++)
            ans+=min(mxleft[i], mxright[i])-ht[i];
        
        return ans;
    }
};







APPROACH - II)  USING STACK 

class Solution {
public:
    int trap(vector<int>& ht) 
    {
        stack<int> st;
        int n=ht.size(),ans=0,diff,cur,i;
        
        for(i=0;i<n;i++)
        {
            while(!st.empty() && ht[st.top()]<ht[i])
            {
                cur= st.top();
                st.pop();
                if(st.empty())
                    break;
                
                diff = i-st.top()-1;
                ans=ans+((min(ht[st.top()], ht[i])-ht[cur])*diff);
            }
            st.push(i);
        }
        return ans;
    }
};
