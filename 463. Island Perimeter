class Solution {
public:
    int k;
    int solve(vector<vector<int>>& grid, int i, int j, int n, int m)
    {
        if(i>=n || j>=m || i<0 || j<0)
            return 0;      
        
        if(grid[i][j]==1)
        {
            if(i+1<n && grid[i+1][j]==0)
                k++;
            if(i-1>=0 && grid[i-1][j]==0)
                k++;
            if(j+1<m && grid[i][j+1]==0)
                k++;
            if(j-1>=0 && grid[i][j-1]==0)
                k++;
            if(i==n-1)
                k++;
            if(i==0)
                k++;
            if(j==m-1)
                k++;
            if(j==0)
                k++;
            
            grid[i][j]=-1;
            
            if(i+1<n && grid[i+1][j]==1)
                solve(grid, i+1, j, n, m);
            
            if(i-1>=0 && grid[i-1][j]==1)
                solve(grid, i-1, j, n, m);
            
            if(j+1<m && grid[i][j+1]==1)
                solve(grid, i, j+1, n, m);
            
            if(j-1>=0 && grid[i][j-1]==1)
                solve(grid, i, j-1, n, m);
        }
        
        return k;
    }
    int islandPerimeter(vector<vector<int>>& grid) 
    {
        k=0;
        int i, j, n=grid.size(), m=grid[0].size(),flag=0;
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                {
                    flag=1;
                    break;
                }
            }
            if(flag==1)
                break;
        }
        
        return solve(grid, i, j, n, m);
    }
};
