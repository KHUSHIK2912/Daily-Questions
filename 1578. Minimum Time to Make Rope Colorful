APPROACH - I) TWO POINTER MEMOIZED APPROACH (MEMORY LIMIT EXCEEDED)

class Solution {
public:
    vector<vector<int>> t;
    int solve(string& col, int n, int i, int j, vector<int>& time)
    {
        if(i<0 || j<0 || i>=n || j>=n)
            return 0;
        
        if(t[i][j]!=-1)
            return t[i][j];
        
        if(i==j)
            return t[i][j]=solve(col, n, i, j+1, time);
        
        if(col[i]==col[j])
        {
            if(time[i]<time[j])
                return t[i][j]=time[i]+solve(col, n, j, j+1, time);
            else
                return t[i][j]=time[j]+solve(col, n, i, j+1, time);
        }
        
        return t[i][j]=solve(col, n, j, j+1, time);
    }
    int minCost(string colors, vector<int>& time) 
    {
        int n=colors.size();
        cout<<n<<endl;
        t=vector<vector<int>>(n+1, vector<int>(n+1, -1));
        return solve(colors, n, 0, 1, time);
    }
};


TIME COMPLEXITY - O(N)   (NOT SURE)
SPACE COMPLEXITY - O(N^2)






APPROACH - II) SPACE OPTIMIZED MEMOIZED APPROACH

class Solution {
public:
    vector<int> t;
    int solve(string& col, int n, char prev, vector<int>& time, int prevt)
    {
        if(n<=0)
            return 0;
        
        if(t[n]!=-1)
            return t[n];
        
        if(col[n-1]==prev)
            return t[n]=min(time[n-1],prevt)+solve(col, n-1, col[n-1], time, max(time[n-1], prevt));
        
        return t[n]=solve(col, n-1, col[n-1], time, time[n-1]);
    }
    int minCost(string colors, vector<int>& time) 
    {
        int n=colors.size();
        t=vector<int> (n+1, -1);
        return solve(colors, n, 'A', time, time[n-1]);
    }
};


TIME COMPLEXITY - O(N)  
SPACE COMPLEXITY - O(N)
