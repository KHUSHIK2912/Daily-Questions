SAME QUESTION AS - 

865. Smallest Subtree with all the Deepest Nodes

Given the root of a binary tree, the depth of each node is the shortest distance to the root.

Return the smallest subtree such that it contains all the deepest nodes in the original tree.

A node is called the deepest if it has the largest depth possible among any node in the entire tree.

The subtree of a node is a tree consisting of that node, plus the set of all descendants of that node.

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4]
Output: [2,7,4]
Explanation: We return the node with value 2, colored in yellow in the diagram.
The nodes coloured in blue are the deepest nodes of the tree.
Notice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.
Example 2:

Input: root = [1]
Output: [1]
Explanation: The root is the deepest node in the tree.
Example 3:

Input: root = [0,1,3,null,2]
Output: [2]
Explanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.
 

Constraints:

The number of nodes in the tree will be in the range [1, 500].
0 <= Node.val <= 500
The values of the nodes in the tree are unique.







/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* LCA(TreeNode* root, TreeNode* p, TreeNode* q) 
    {
        if(root==NULL)
            return NULL;
        
        if(root->val==p->val || root->val==q->val)
            return root;
        
        TreeNode* leftLCA=LCA(root->left, p, q); 
        TreeNode* rightLCA=LCA(root->right, p, q);
        
        if(leftLCA && rightLCA)
            return root;
        
        if(!leftLCA && !rightLCA)
            return NULL;
        
        if(leftLCA)
            return leftLCA;
        
        return rightLCA;
    }
    
    TreeNode* lcaDeepestLeaves(TreeNode* root) 
    {
        if(root==NULL)
            return NULL;
        
        vector<TreeNode*> v;
        queue<TreeNode*> q;
        q.push(root);
        int i,n;
        TreeNode* node;
        
        while(!q.empty())
        {
            n=q.size();
            v.clear();
            for(i=0;i<n;i++)
            {
                node=q.front();
                q.pop();
                
                if(node)
                {
                    v.push_back(node);
                    
                    if(node->left)
                        q.push(node->left);
                    if(node->right)
                        q.push(node->right);
                }
            }
        }
        if(v.size()==1)
            return v[0];
        
        TreeNode* newLCA;
        
        newLCA=LCA(root, v[0], v[1]);
        
        for(i=2;i<v.size();i++)
            newLCA=LCA(root, newLCA, v[i]);
        
        return newLCA;
    }
};
