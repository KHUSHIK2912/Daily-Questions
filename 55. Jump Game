I)  RECURSIVE APPROACH

class Solution {
public:
    bool solve(vector<int>& v, int n)
    {
        if(n>1 && v[n-1]==0)
            return false;
        if(n==1)
            return true;
        
        int i;
        for(i=v[n-1];i>0;i--)
        {
            if(solve(v,n-i))
                return true;
        }
        return false;
    }
    
    bool canJump(vector<int>& nums) 
    {
        int n=nums.size();
        reverse(nums.begin(),nums.end());
        
        return solve(nums,n);
    }
};







II)  MEMOIZED APPROACH

class Solution {
public:
    vector<int> t;
    bool solve(vector<int>& v, int n)
    {        
        if(n<=1)
            return 1;
        
        if(n>1 && v[n-1]==0)
            return t[n]=0;
        
        if(t[n]!=-1)
            return t[n];
        
        int i;
        for(i=v[n-1];i>0;i--)
        {
            if(solve(v,n-i))
                return t[n]=1;
        }
        return t[n]=0;
    }
    
    bool canJump(vector<int>& nums) 
    {
        int n=nums.size(),i;
        reverse(nums.begin(),nums.end());
        
        t=vector<int>(n+1,-1);
        
        int ans=solve(nums,n);
        
        
        // for(i=0;i<n+1;i++)
        //     cout<<t[i]<<"  ";
        // cout<<endl;
        
        if(ans==1)
            return true;
        return false;
    }
};






III)  DYNAMIC PROGRAMMING APPROACH



Method:

we follow the tabulation method
create a dp boolean array such that
dp[i] = denotes whether you can reach the end from this index or not
now at every ith element we can take 1 to nums[i] number of steps so we check if there is any index between 1 to nums[i] where the condition is true if it is then we set this dp[i] as true as it's possible to reach the end from this index
at last we return dp[0] because we want to know whether we can reach the last index starting from the first index

Time Complexity: O(n)
as the loop runs n times

Space Complexity: O(n)
as we created a dp array of size n




class Solution {
public:
    int solve(vector<int>& v, int n)
    {        
        int i,j,t[n];
        t[n-1]=1;
        
        for(i=n-2;i>=0;i--)
        {
            if(v[i]==0)
                t[i]=0;
            for(j=1;j<=v[i];j++)
            {
                if(i+j>=n)
                    break;
                if(t[i+j]==1)
                {
                    t[i]=1;
                    flag=1;
                    break;
                }
                else
                    t[i]=0;
            }
        }
        
        // for(i=0;i<n;i++)
        //     cout<<t[i]<<"  ";
        // cout<<endl;
        
        return t[0];
    }
    
    bool canJump(vector<int>& nums) 
    {
        int n=nums.size(),i;
        
        int ans=solve(nums,n);
        
        if(ans==1)
            return true;
        return false;
    }
};
