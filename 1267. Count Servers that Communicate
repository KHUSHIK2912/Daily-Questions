APPROACH - I)

class Solution {
public:
    int countServers(vector<vector<int>>& grid) 
    {
        int i,j,k,n=grid.size(),m=grid[0].size(),sum=0,c;
        
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                {
                    c=1;
                    for(k=0;k<n;k++)
                    {
                        if(grid[k][j]==1 && k!=i)
                            c++;
                    }
                    for(k=0;k<m;k++)
                    {
                        if(grid[i][k]==1 && k!=j)
                            c++;
                    }
                    
                    if(c>1)
                        sum++;
                }
            }
        }
        
        return sum;
    }
};


TIME COMPLEXITY - O(N^3)
SPACE COMPLEXITY - O(1)







APPROACH - II)

class Solution {
public:
    int countServers(vector<vector<int>>& grid) 
    {
        int i,j,n=grid.size(),m=grid[0].size(),sum=0;
        vector<int> row(n),col(m);
        
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                {
                    row[i]++;
                    col[j]++;
                }
            }
        }
        
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(grid[i][j]==1 && (row[i]>1 || col[j]>1))
                    sum++;
            }
        }
       
        return sum;
    }
};


TIME COMPLEXITY - O(N^2)
SPACE COMPLEXITY - O(N+M)
