I)  BFS APPROACH

class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int src, int dest) 
    {
        int i,t;
        map<int,vector<int>> mp;
        for(i=0;i<edges.size();i++)
        {
            mp[edges[i][0]].push_back(edges[i][1]);
            mp[edges[i][1]].push_back(edges[i][0]);
        }
        
        vector<int> vis(n,0);
        queue<int> q;
        
        q.push(src);
        vis[src]=1;
        while(!q.empty())
        {
            t=q.front();
            q.pop();
            
            if(t==dest)
                return true;
            for(i=0;i<mp[t].size();i++)
            {
                if(vis[mp[t][i]]==0)
                {
                    q.push(mp[t][i]);
                    vis[mp[t][i]]=1;
                }
            }                    
        }
        return false;
    }
};





II)  DFS APPROACH


class Solution {
public:
    vector<int> vis;
    bool getpath(map<int,vector<int>>& mp, int n, int src, int dest)
    {
        if(vis[dest]==1)
            return true;
        
        if(src==dest)
            return true;
        
        int i;
        for(i=0;i<mp[src].size();i++)
        {
            if(vis[mp[src][i]]==0)
            {
                vis[src]=1;
                if(getpath(mp,n,mp[src][i],dest))
                    return true;
            }
        }
        return false;
    }
    bool validPath(int n, vector<vector<int>>& edges, int src, int dest) 
    {
        int i,t;
        map<int,vector<int>> mp;
        for(i=0;i<edges.size();i++)
        {
            mp[edges[i][0]].push_back(edges[i][1]);
            mp[edges[i][1]].push_back(edges[i][0]);
        }
        vis=vector<int>(n,0);
        
        return getpath(mp,n,src,dest);
    }
};
