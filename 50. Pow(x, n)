APPROACH - I     (BRUTE FORCE APPROACH)

class Solution {
public:
    double myPow(double x, int n) 
    {
        long int i,t=n;
        double y=x;
        
        if(t<0)
            t=-t;
        cout<<t;
        for(i=t-1;i>0;i--)
        {
            y=y*x;
        }
        if(n<0)
            return 1/y;
        return y;
    }
};

// Brute Force TC - O(n) SC - O(1)



APPROACH - II     (RECURSIVE APPROACH)

class Solution {
public:
    double solve(double x, long int n)
    {
        if(n==0 || x==1.0)
            return 1.0;
        
        if(n%2==0)
            return solve(x*x,n/2);
        
        return (x*solve(x,n-1));
    }
    double myPow(double x, int n) 
    {
        if(n==0 || x==1.0)
            return 1.0;
        
        long int t=n;
        if(t<0)
            t=-t;
        double p=solve(x,t);
        if(n<0)
            return 1/p;
        return p;
    }
};

// Recursive Solution TC - O(logn) SC - O(n)



APPROACH - III    (ITERATIVE APPROACH)

double myPow(double x, int n) 
{
		double ans = 1.0;
		long long temp = abs(n);
		while(temp) 
    {
			  if(temp % 2 != 0) {
				ans = ans * x;      // 4 ^ 3  --> 4 * (4)^2
				temp = temp - 1;
		}
		else 
    {
				x = x * x;         // 2 ^ 10 --> (2 * 2) ^ 5   i.e  x = x * x, n = n / 2
				temp = temp / 2;
		}
		}
		if(n<0)
			  ans = 1/ans;
		return ans;
}

// Iterative Solution  TC - O(logn) SC - O(1)



APPROACH - IV   (STL)

double myPow(double x, int n) 
{
		return (double)pow(x, n);
}

// Using Standard Library Function TC - O(logn) SC - O(1)
  
