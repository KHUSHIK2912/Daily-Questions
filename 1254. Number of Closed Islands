class Solution {
public:
    void dfs(vector<vector<int>>& grid, int i, int j, int n, int m)
    {
        if(grid[i][j]==1)
            return ;
        
        grid[i][j]=1;
        if(i+1<n && grid[i+1][j]==0)
            dfs(grid,i+1,j,n,m);
        if(i-1>=0 && grid[i-1][j]==0)
            dfs(grid,i-1,j,n,m);
        if(j+1<m && grid[i][j+1]==0)
            dfs(grid,i,j+1,n,m);
        if(j-1>=0 && grid[i][j-1]==0)
            dfs(grid,i,j-1,n,m);
    }
    int closedIsland(vector<vector<int>>& grid) 
    {
        int i,j,n=grid.size(),m=grid[0].size(),c=0;
        
        for(i=0;i<n;i++)
        {
            if(grid[i][0]==0)
                dfs(grid,i,0,n,m);
            if(grid[i][m-1]==0)
                dfs(grid,i,m-1,n,m);
        }
        
        for(j=0;j<m;j++)
        {
            if(grid[0][j]==0)
                dfs(grid,0,j,n,m);
            if(grid[n-1][j]==0)
                dfs(grid,n-1,j,n,m);
        }
        
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(grid[i][j]==0)
                {
                    c++;
                    dfs(grid,i,j,n,m);
                }
                    
            }
        }
        return c;
    }
};
