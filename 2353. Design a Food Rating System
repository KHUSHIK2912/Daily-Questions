struct comp
{
    bool operator() (pair<int,string> &a,pair<int,string> &b)
    {
        if(a.first==b.first) 
            return a.second>b.second;
        return a.first<b.first;
    }
};
class FoodRatings {
public:
    unordered_map<string,int> mp1;
    unordered_map<string,string> mp2;
    unordered_map<string,priority_queue<pair<int,string>,vector<pair<int,string>>,comp>> mp;
  
    FoodRatings(vector<string>& foods, vector<string>& cuisines, vector<int>& ratings) 
    {
        int i;        
        for(i=0;i<foods.size();i++)
        {
            mp1[foods[i]]=ratings[i]; 
            mp2[foods[i]]=cuisines[i];
            mp[cuisines[i]].push({ratings[i], foods[i]});         
        }
    }
    
    void changeRating(string food, int newRating) 
    {
        mp1[food]=newRating;
        string cuisine=mp2[food];
        mp[cuisine].push({newRating,food});
    }
    
    string highestRated(string cuisine) 
    {
        string y;
        int x;
        while(!mp[cuisine].empty())
        {
            x=mp[cuisine].top().first;
            y=mp[cuisine].top().second;
            
            if(mp1[y]==x)
                return y;
            
            mp[cuisine].pop();            
        }
        return "";
    }
};

/**
 * Your FoodRatings object will be instantiated and called as such:
 * FoodRatings* obj = new FoodRatings(foods, cuisines, ratings);
 * obj->changeRating(food,newRating);
 * string param_2 = obj->highestRated(cuisine);
 */
