/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> v;
    vector<int> vp;
    bool getpath(TreeNode* root, TreeNode* node)
    {
        if(root==NULL)
            return false;
        
        vp.push_back(root->val);
        if(root==node)
            return true;
        
        if(getpath(root->left, node) || getpath(root->right, node))
            return true;
        
        vp.pop_back();
        return false;
    }
    void getleaves(TreeNode* root)
    {
        if(root==NULL)
            return;
        
        if(root->left==NULL && root->right==NULL)
            v.push_back(root);
        
        getleaves(root->left);
        getleaves(root->right);
    }
    vector<vector<int>> pathSum(TreeNode* root, int target) 
    {
        v.clear();
        getleaves(root);
        
        vector<vector<int>> ans;
        int i,sum=0;
        
        for(auto it: v)
        {
            if(getpath(root, it))
            {
                for(i=0;i<vp.size();i++)
                    sum+=vp[i];
                if(sum==target)
                    ans.push_back(vp);
                vp.clear();
                sum=0;
            }
        }
        
        return ans;
    }
};
