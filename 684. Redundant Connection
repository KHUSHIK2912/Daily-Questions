class Solution {
public:
    vector<vector<int>> adj;
    vector<bool> vis;
    bool isCycle(int src, int parent)
    {
        vis[src]=true;
        for(auto it: adj[src])
        {
            if(it!=parent)
            {
                if(vis[it])
                    return true;
                if(!vis[it] && isCycle(it,src))
                    return true;
            }
        }
        return false;
    }
    vector<int> findRedundantConnection(vector<vector<int>>& edges) 
    {
        int i,j,n=edges.size();
        adj=vector<vector<int>> (n);
        vis=vector<bool> (n,false);
        
        for(i=0;i<n;i++)
        {
            adj[edges[i][0]-1].push_back(edges[i][1]-1);
            adj[edges[i][1]-1].push_back(edges[i][0]-1);
            
            if(!vis[edges[i][0]-1] && isCycle(edges[i][0]-1,-1))
                return edges[i];
            vis=vector<bool> (n,false);
        }
        return edges[0];
    }
};
