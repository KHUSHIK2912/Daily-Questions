class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) 
    {
        int i, j, n=grid.size(), m=grid[0].size(), c=0, x,y;
        queue<pair<int,int>> q;
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(grid[i][j]==2)
                q.push({i,j});
            }
        }
        
        while(!q.empty())
        {
            j=q.size();
            for(i=0;i<j;i++)
            {
                x=q.front().first;
                y=q.front().second;
                q.pop();
                
                if(x-1>=0 && grid[x-1][y]==1)
                {
                    q.push({x-1,y});
                    grid[x-1][y]=2;
                }
                if(y-1>=0 && grid[x][y-1]==1)
                {
                    q.push({x,y-1});
                    grid[x][y-1]=2;
                }
                if(x+1<n && grid[x+1][y]==1)
                {
                    q.push({x+1,y});
                    grid[x+1][y]=2;
                }
                if(y+1<m && grid[x][y+1]==1)
                {
                    q.push({x,y+1});
                    grid[x][y+1]=2;
                }
            }
            c++;
        }
        
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                return -1;
            }
        }
        
        if(c>1)
            return c-1;
        return 0;
        
    }
};
