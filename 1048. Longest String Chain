class Solution {
public:
    static bool compare(string &s1, string &s2)
    {
        return s1.length() < s2.length();
    }
    
    int LCS(string x, string y, int n, int m)
    {
        int i,j,t[n+1][m+1];
        
        for(i=0;i<n+1;i++)
        {
            for(j=0;j<m+1;j++)
            {
                if(i==0 || j==0)
                    t[i][j]=0;
            }
        }
        
        for(i=1;i<n+1;i++)
        {
            for(j=1;j<m+1;j++)
            {
                if(x[i-1]==y[j-1])
                    t[i][j]=1+t[i-1][j-1];
                else
                    t[i][j]=max(t[i-1][j], t[i][j-1]);
            }
        }
        return t[n][m];
    }
    
    int solve(vector<string>& words, int n)
    {
        int t[n];
        int i,j,c;
        
        for(i=0;i<n;i++)
            t[i]=1;
        
        for(i=0;i<n;i++)
        {
            for(j=0;j<i;j++)
            {
                if(words[i].size()==words[j].size()+1)
                {
                    c=LCS(words[i], words[j], words[i].size(), words[j].size());
                    if(c==words[j].size())
                        t[i]=max(t[i],1+t[j]);
                }
            }
        }
        
        // for(i=0;i<n;i++)
        //     cout<<t[i]<<"  ";
        // cout<<endl;
        return *max_element(t,t+n);
    }
        
    int longestStrChain(vector<string>& words) 
    {
        sort(words.begin(), words.end(), compare);
        int n=words.size();
        
        return solve(words,n);
    }
};
